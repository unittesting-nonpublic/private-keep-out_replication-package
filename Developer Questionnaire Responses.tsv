P#	Timestamp	What is your main programming language?	If your main language does not have access modifiers (e.g., public, private, protected, etc.), do you follow any conventions to denote visibility of methods and instance variables?   (For example, some Python programmers elect to prefix private methods with an underscore.) 	If you answered "yes", please tell us what conventions you follow.  If you answered "no", please tell us your reasons as to why you do not follow any conventions.	Does the code that you are usually testing involve non-public methods?	To what extent do you agree with the following statement?  "In general, developers should write unit tests that only invoke public methods, avoiding direct calls to non-public methods."	How often do you write tests that directly invoke non-public methods?	How do you go about testing non-public methods? [Via public method that invokes the non-public method]	How do you go about testing non-public methods? [Directly invoking the non-public method]	How do you go about testing non-public methods? [Using Reflection / Mocks]	How do you go about testing non-public methods? [Adding test code (e.g., print statements or assertions) in production code]	How do you go about testing non-public methods? [Temporarily changing non-public methods to public]	How do you go about testing non-public methods? [Changing the visibility of the method to public permanently]	Are there any other approaches or strategies that you use to test non-public methods?	Do you take a different approach for testing different levels of visibility of non-public methods? (For example, is your treatment of private methods different compared to protected methods?)	If you answered "yes", please tell us how and why.	Are there any guidelines, best practices, or specific rules you follow when testing non-public methods?  If so, please tell us about them here.	To what extent do you value the following aspects when writing unit tests? [Coverage of production code]	To what extent do you value the following aspects when writing unit tests? [Capturing the behaviour of the production code (through assertions)]	To what extent do you value the following aspects when writing unit tests? [Ease of debugging following production code failures]	To what extent do you value the following aspects when writing unit tests? [Robustness following refactoring of production code]	To what extent do you value the following aspects when writing unit tests? [Sensitivity to behavioural changes of production code]	To what extent do you value the following aspects when writing unit tests? [Realistic exercising of the unit by the test in a similar way to its usage in production]	To what extent do you value the following aspects when writing unit tests? [Tests that instill confidence in the production code]	To what extent do you value the following aspects when writing unit tests? [Writing concise unit tests to test the production code]	To what extent do you agree with the following statement?  "Testing non-public methods leads to more tests failing spuriously when modifications are made to those methods."	If you have anything else to say about your thoughts and/or processes when writing unit tests with respect to testing public and non-public methods, please let us know here:	Are there features you'd like to see in unit testing or mocking tools in the future to better accommodate the testing of non-public methods?	How many years of experience do you have in software development?	How many years of experience do you have in writing unit tests?	In which industry are you currently working in?	Do you employ any of the following software development methodologies and/or programming practices? Please tick all that apply.
1	18/09/2023 15:39:36	Typescript	My main programming language has access modifiers		Yes	Strongly disagree	Often	Never	Often	Sometimes	Rarely	Never	Never	If the language supports and internal modifier to give access to certain test classes, id use that.	No		I said no to temporarily setting to public, however I have heard of overriding the methods to be public. I guessed that would be under mocks with reflection though. 	Somewhat important	Very Important	Very Important	Very Important	Very Important	Important	Very Important	Somewhat important	Disagree			5–10	5–10	Enterprise / Business Software	Test-driven development
2	19/09/2023 04:24:20	Java	My main programming language has access modifiers		No	Agree	Often	Mostly	Rarely	Often	Sometimes	Rarely	Rarely	No	No		Always test on non-public methods by invoke public methods	Very Important	Important	Very Important	Important	Very Important	Somewhat important	Not important	Very Important	Agree	Unless need to test something like decryption features, these method are in non-public, because is very sensitive and intrinsic to the code and normally not exposed to outside, and anymore cloud use it, when we  wanted to test it out, is wroth to use reflection. Trade off like security will be primary consideration.		2–5	2–5	Information Technology, University / Education, Fintech (Finance)	Behaviour-driven development, Agile methodology, e.g. Scrum
3	20/09/2023 18:10:55	PHP	My main programming language has access modifiers		Yes	Disagree	Sometimes	Sometimes	Not a feature in my language	Often	Rarely	Sometimes	Never		No			Important	Very Important	Important	Important	Very Important	Somewhat important	Very Important	Important	Disagree	I wish I could private methods as if they were public methods.	I want to test private methods directly as if they were public.	5–10	2–5	Transportation / Automotive	Test-last development, Feature-driven development, Agile methodology, e.g. Scrum
4	20/09/2023 20:26:13	Python	Yes	Use underscore as for Python convention 	Yes	Strongly disagree	Often	Often	Mostly	Sometimes	Mostly	Never	Never		No			Very Important	Very Important	Important	Very Important	Very Important	Very Important	Very Important	Important	Disagree			10–15	5–10	Information Technology	Test-driven development, Agile methodology, e.g. Scrum
5	22/09/2023 15:26:21	PHP	My main programming language has access modifiers		No	Agree	Rarely	Mostly	Not a feature in my language	Rarely	Never	Never	Rarely		No			Somewhat important	Very Important	Very Important	Very Important	Somewhat important	Very Important	Very Important	Not important	Disagree	While the ability to test smaller non-public methods sounds tempting, the reality is that the software is designed to produce a set of features (accessible via public functions). These features (and the corresponding public functions) must still be fully tested to ensure that the end product accurately provides the desired functionality.  Even if you perfectly test a non-public function, you need to perfectly test the corresponding public functions that utilize the non-public function, and you need to test that your public function correctly utilizes the non-public function for all test cases.		5–10	2–5	Information Technology	Test-last development
6	22/09/2023 18:35:33	Ruby	My main programming language has access modifiers		Yes	Disagree	Often	Mostly	Rarely	Rarely	Rarely	Never	Never		Yes	More often a protected method demands more explicit testing on it, since it's use is usually more complex in scope than a private method		Very Important	Very Important	Important	Important	Important	Very Important	Very Important	Important	Agree			5–10	2–5	Fintech (Finance)	Test-last development, Agile methodology, e.g. Scrum
7	24/09/2023 02:06:06	Typescript	No	I typically just follow "export" as an indicator that a function or class is public, and that the current codebase conventions don't denote the visibility.	No	Agree	Sometimes	Mostly	Sometimes	Often	Never	Never	Rarely		No			Very Important	Very Important	Important	No opinion	Important	Somewhat important	Very Important	Very Important	Disagree			0–2	0–2	Enterprise / Business Software, Retail Industry	Behaviour-driven development, Feature-driven development, Agile methodology, e.g. Scrum
8	26/09/2023 00:40:42	C#	My main programming language has access modifiers		No	Strongly disagree	Never	Mostly	Never	Sometimes	Never	Never	Never		No		Do not compromise your method accessibility due to test.	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Important	Strongly Disagree			0–2	0–2	Information Technology	Test-driven development, Agile methodology, e.g. Scrum
9	27/09/2023 23:56:06	Typescript	Yes	We use exports from ESModules to control methods that can be imported elsewhere in the program. Internal (private) methods are not exported from a script so cannot be imported. These non-exported methods are generally stateless.	Yes	Disagree	Never	Mostly	Not a feature in my language	Never	Never	Rarely	Often	Usually we export the subject under test if we need to directly invoke the method during unit testing. We also need to export methods that we mock with testdouble.	No		We expose non-exported methods if they are directly needed as a test target	Somewhat important	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Important	Disagree	If there was a way to test non-exported modules in JS/TS, we would very much appreciate it! Especially if we could mock these non-exported methods.	Greater control over the JS/TS loader during test would be nice as it would allow us to have more precise control over private method without exposing them. For instance, we could assert if a private method was called during the test and with what parameters.	5–10	5–10	Information Technology	Acceptance test-driven development, Agile methodology, e.g. Scrum
10	28/09/2023 09:49:30	Kotlin	My main programming language has access modifiers		No	Agree	Rarely	Mostly	Rarely	Often	Never	Never	Rarely		No			Important	Very Important	Important	Somewhat important	Important	Important	Somewhat important	Important	Agree			2–5	2–5	University / Education	Feature-driven development, Agile methodology, e.g. Scrum
11	28/09/2023 10:06:12	JavaScript	Yes	Underscore 	No	Agree	Never	Mostly	Never	Sometimes	Often	Never	Never	In majority cases we always go through public method. 	No		Making sure engineer knows all the non-public methods being called in their test cases. Writing relevant assertions for side effects, business logic or if needed mocks. 	Very Important	Very Important	Somewhat important	Important	Very Important	Somewhat important	Very Important	Very Important	Disagree	Important to have test framework where engineers can easily write new tests. Otherwise hard to increase coverage.   Avoid mocks unless absolutely needed since they add friction.  Better to test private methods through public instead of asking engineers to go through different hoops to expose a private method for tests. More friction in writing tests will always reduce adoption in the team. 	Better line & branch coverage reporting tools. 	More than 15	10–15	Information Technology, Healthcare	Test-last development, Feature-driven development, Agile methodology, e.g. Scrum
12	28/09/2023 10:20:12	C#	My main programming language has access modifiers		Yes	Strongly agree	Never	Mostly	Never	Rarely	Never	Never	Never		No			Important	Very Important	Somewhat important	Important	Very Important	Very Important	Very Important	Somewhat important	Agree	My general philosophy when writing tests, which may be somewhat controversial, is to test as ‘deep’ as possible from the entry point of the system - so always a public method, but sometimes even a level above that if you have for example a controller A calling a public method on services X and Y each with their own non public methods - I would test at the controller A point. This is because it gives you the best balance between confidence about the behaviour of the system and ability to refactor. If you change the behaviour your tests should fail. I also believe that mocking as little as possible is optimal, the testing I try and get my team to do is what we call ‘unigration’ - so in python we use moto3 for mocking aws services and pyvcr for capturing and repeating other network calls in the tests. When reading or writing tests I want them to provide three main things, firstly confidence in the behaviour of the system - I.e that it handles errors, unexpected inputs and does the right thing with valid input, secondly I want them to act as a form documentation, specially for any complex or harder to understand business logic and finally as a tool to increase developer productivity, massively reducing the developer feedback loop on their code, saves pushing and waiting a couple of minutes for images to build, terraform to plan & apply and either manual tests to get performed or integration tests to run.	No	5–10	5–10	Fintech (Finance)	Test-driven development, Behaviour-driven development, Agile methodology, e.g. Scrum
13	28/09/2023 11:18:24	C#	My main programming language has access modifiers		Yes	Strongly agree	Never	Mostly	Never	Never	Never	Never	Never	Refactor the logic in the private method to another class that can be tested with public methods	No		no	Somewhat important	Important	Very Important	Very Important	Very Important	Very Important	Very Important	Important	Agree			More than 15	More than 15	Enterprise / Business Software	Agile methodology, e.g. Scrum
14	28/09/2023 11:51:41	Python	Yes	underscore prefix on private methods and instance variables	Yes	Strongly agree	Never	Mostly	Never	Never	Rarely	Sometimes	Rarely	Using the subclass to test pattern, overriding parts of the class to be able to observe internal implementation details. Similar to this approach https://jenkov.com/tutorials/java-unit-testing/subclass-mock-objects.html	Yes	I will tend to try not to test private methods, and test classes through the public interface. In some cases I will introduce and override protected methods to test implementation details. Generally I will use this as an interim step while refactoring to isolate code that is hard to test.	Test via the public interface to avoid coupling to the implementation	Important	Very Important	Very Important	Very Important	Important	Very Important	Very Important	Not important	Agree	Changing the internal design of a class (or a unit under test) is a common thing to do. Private methods are implementation details of this internal design. Adding tests for private methods increases coupling, which makes it much harder to safely refactor code.  If you need to test private methods that is usually a sign that there is a problem with the design of the code.	No, adding this would likely increase coupling to implementation details	More than 15	More than 15	Fintech (Finance)	Test-driven development, Behaviour-driven development, Acceptance test-driven development, Agile methodology, e.g. Scrum
15	28/09/2023 13:08:05	PHP	My main programming language has access modifiers		Yes	Strongly agree	Rarely	Mostly	Not a feature in my language	Rarely	Never	Never	Rarely		No			Important	Very Important	Important	Very Important	Important	Somewhat important	Important	Important	Strongly Agree			10–15	5–10	Enterprise / Business Software	Test-driven development, Test-last development, Agile methodology, e.g. Scrum
16	28/09/2023 13:21:27	Java	My main programming language has access modifiers		Yes	Strongly disagree	Always	Often	Often	Often	Mostly	Never	Never		No			Very Important	Very Important	Very Important	Very Important	Very Important	Important	Important	Important	Disagree		Some integrated reflection to be able to access and unit test private methods.	2–5	2–5	Fintech (Finance)	Test-driven development, Behaviour-driven development, Agile methodology, e.g. Scrum, Waterfall method
17	28/09/2023 13:42:40	Kotlin	My main programming language has access modifiers		Not sure	Strongly agree	Rarely	Mostly	Rarely	Never	Often	Never	Sometimes		Yes	you can test protected methods in unit tests, whereas you shall never do it directly for private methods		Very Important	No opinion	Very Important	Important	Somewhat important	Not important	Important	No opinion	Disagree			More than 15	More than 15	University / Education	Agile methodology, e.g. Scrum
18	28/09/2023 20:56:37	Scala	My main programming language has access modifiers		Yes	Disagree	Sometimes	Often	Sometimes	Never	Never	Never	Rarely		Yes	More likely to test protected methods directly	It should generally be sufficient to test private methods via the external interface. If they are too complex for this, it may be worth dividing up the the overall object, because it may have excessive amounts of behaviour implemented.	Very Important	Very Important	Important	Very Important	Very Important	Important	Very Important	Important	Agree	Writing concise tests isn't as valuable as writing tests that are easy to understand. These facets are usually related but are not the same. Tests that are explicit but repetitive can be easier to understand that tests which abstract away implementation detail, for example.	An emphasis on readability	10–15	10–15	Information Technology, Public Sector / Government / Defense	Test-driven development, Behaviour-driven development, Agile methodology, e.g. Scrum, Code generation/scaffolding
19	28/09/2023 21:33:39	Python	My main programming language has access modifiers		Yes	Strongly disagree	Never	Mostly	Never	Never	Never	Never	Never		No			Very Important	Very Important	Important	Important	Important	Somewhat important	Somewhat important	Somewhat important	Strongly Agree			More than 15	5–10	University / Education	
20	29/09/2023 09:24:51	Java	My main programming language has access modifiers		Yes	Not sure	Rarely	Sometimes	Sometimes	Never	Never	Never	Never	Complicated private methods are a code smell; writing tests after the code is complete is bad practice. Generally I'm writing code TDD so the tests are written first which means the code is tested before any methods are made private. If am having to test code after it has been written, I will refactor the code to make testing easier which will often involve moving private methods into new classes to make them easier to test.	Yes	Protected methods can be tested directly as the tests are in the same package. Protected methods are shared code and so can be tested like public methods.	TDD, test first, write code and therefore decide access level second.	Important	Very Important	Very Important	Very Important	Very Important	Somewhat important	Not important	Not important	Not sure	Premise of this questionnaire/study is wrong. Assumes you are writing tests second, by always developing in the TDD/BDD behavioral style you are ensuring your code is fully tested, well designed, and importantly easy to test. You won't end up with big complicated unwieldy private methods as a result.	No. Solving the wrong problem, which is poor developer practice.	More than 15	More than 15	Information Technology	Test-driven development, Behaviour-driven development, Agile methodology, e.g. Scrum
21	29/09/2023 12:19:13	Java	My main programming language has access modifiers		Yes	Strongly agree	Rarely	Mostly	Rarely	Rarely	Never	Never	Never	If you HAVE TO test non-public methods, maybe they are in the wrong place (i.e. maybe they should be extracted elsewhere)	No		If you have to do it, that means you probably have a code smell. Exceptions always exist of course	Somewhat important	Important	Very Important	Very Important	Very Important	Not important	Very Important	Very Important	Agree	TDD often helps you avoid having to test private methods	Not really. Current tools make it seem bad enough, which makes the developer think about it twice. Making it easier to test private methods will lead to more code smells.	5–10	5–10	Fintech (Finance)	Test-driven development, Behaviour-driven development, Acceptance test-driven development, Feature-driven development, Agile methodology, e.g. Scrum
22	29/09/2023 13:06:02	JavaScript	Yes	You might start the function name with an underscore.	Yes	Not sure	Sometimes	Often	Sometimes	Never	Never	Rarely	Sometimes	It is subjective. If you feel that the function is fundamental to correct operation of the overall application, even just for peace of mind it may be worth covering. Also can prevent newer developers on a team who may not yet understand the intricacies of breaking something at such a lower level that which in most cases in my experience private functions are.	No		Keep the function small with clear inputs and outputs. Stick to a functional style but not at the expense of readability. If the function in question is easy to test then why not write the tests. If you are dealing with legacy code, it is more of a value based decision and I would leave that up to the implementer and their level of confidence that they are making a change for the better and not taking an unnecessary risk in making changes.	Somewhat important	Important	Important	Very Important	Very Important	Very Important	Very Important	Somewhat important	Not sure		Mocking should be limited to functions that make external connections (databases, file system, remote api calls) in my opinion.	10–15	10–15	Information Technology	Agile methodology, e.g. Scrum
23	30/09/2023 20:56:11	C#	My main programming language has access modifiers		Yes	Strongly agree	Never	Mostly	Never	Never	Never	Never	Never	This idea of testing non-public methods is completely and utterly wrong.  In the industry it's not even a debate.  You only test public methods.	No		By testing the public methods, these methods will be tested as a side effect	Important	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Strongly Agree	As mentioned, I really don't understand why this is even a debate.  A developer who tests private methods is simply doing it wrong.	No	10–15	5–10	Information Technology, Mass Media / Entertainment	Test-driven development, Acceptance test-driven development, Test-last development, Feature-driven development, Agile methodology, e.g. Scrum
24	01/10/2023 11:41:40	PHP	My main programming language has access modifiers		Yes	Disagree	Rarely	Often	Not a feature in my language	Sometimes	Never	Never	Never		No			Important	Important	Important	Important	Important	Somewhat important	Important	Somewhat important	Not sure			5–10	5–10	Fintech (Finance)	Test-driven development, Feature-driven development, Agile methodology, e.g. Scrum
25	01/10/2023 13:25:37	Ruby	My main programming language has access modifiers		Yes	Strongly agree	Rarely	Mostly	Never	Often	Never	Often	Rarely		No			Important	Very Important	Somewhat important	Very Important	Very Important	Important	Somewhat important	Not important	Agree	Sometimes, even if a private method CAN handle a variety of inputs, it's pointless to test for every possible combination, because you know the code that is calling the private method will never present those possibilities. Assuming all of the public code is tested for its expected inputs + outputs, the private method is more of an organisation tool for humans than an entity to itself, and likely doesn't need the same level of testing by itself. This might be more difficult if, say, the private method is in a class that is frequently extended, and the extended class uses the private method differently, but even in that case, the testing of 'public' behaviour should be sufficient. 		2–5	2–5	Information Technology, Mass Media / Entertainment, Public Sector / Government / Defense	Test-driven development, Test-last development, Feature-driven development, Agile methodology, e.g. Scrum
26	02/10/2023 13:07:44	Python	My main programming language has access modifiers		No	Agree	Never	Never	Never	Never	Never	Never	Never		No			Important	Very Important	Important	Somewhat important	Somewhat important	Somewhat important	Important	Important	Not sure			0–2	0–2	Investment	Feature-driven development, Agile methodology, e.g. Scrum
27	03/10/2023 20:22:59	Java	My main programming language has access modifiers		No	Agree	Never	Sometimes	Rarely	Never	Often	Rarely	Rarely		No			Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Agree			2–5	2–5	University / Education	Agile methodology, e.g. Scrum, Waterfall method
28	05/10/2023 11:23:05	Java	My main programming language has access modifiers		No	Strongly agree	Never	Never	Never	Rarely	Never	Never	Rarely	If they're not used in the public methods then they're unreachable. Testing the behaviour of the public methods tests the private methods, code external to the class being tested doesn't need to know the implementation details.	Yes	A protected method is visible outside of the class it's defined in, so it gets unit tested.	If external code needs to know about the functionality of the private method then you should refactor the entire class until this is not the case.	Not important	Very Important	No opinion	Very Important	Very Important	Very Important	Very Important	Very Important	Strongly Agree			5–10	5–10	Enterprise / Business Software	Acceptance test-driven development, Test-last development, Agile methodology, e.g. Scrum
29	06/10/2023 11:53:58	Python	No	Not currently required for me	No	Disagree	Never	Not sure	Not sure	Not sure	Not sure	Not sure	Not sure	No	No			Important	Very Important	Very Important	No opinion	No opinion	Very Important	Very Important	Very Important	Not sure		I guess it is very important to test non-public methods, it is just not so important in my current environment.	10–15	2–5	Information Technology, University / Education, Public Sector / Government / Defense	Agile methodology, e.g. Scrum
30	07/10/2023 08:55:30	Java	My main programming language has access modifiers		Yes	Strongly agree	Never	Mostly	Never	Never	Never	Never	Never	Private methods are implementation and internal to the methods and behaviours under test. Testing them is straight up white box testing (not dissimilar to mocking) and as a result makes your code hard to refactor and change. As a consequence, as your code base increases in size, it will become ever more encased in concrete, hugely difficult to change and refactor. In the end, people will stop changing and improving the code because doing so will break so many tests.  Unit testing is about testing behaviour not methods. 	No		See above. Use coverage tools to identify parts of your code that you have forgotten to test, but rather than think of missed code, think of missed / untested behaviours   In other words, black box test first, white box to identify missing tests. Grey box testing essentially 	Important	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Important	Agree		No. Doing so will push bad behaviours. Look no further than powermock - a super powerful mocking library but also an awful tool that has destroyed code bases due to how it has been abused (unwittingly by average devs).	More than 15	More than 15	Enterprise / Business Software	Test-driven development, Behaviour-driven development
31	10/10/2023 16:08:47	Python	Yes	Using underscores or double underscores for private variables/methods	Yes	Disagree	Sometimes	Often	Mostly	Often	Never	Never	Never		No			Important	Not important	Important	Very Important	Very Important	Very Important	Very Important	Somewhat important	Not sure	Personally while I can see the argument for not testing private methods to avoid having to change tests, the most important thing is that I'm confident that the behaviours and edge cases work, and if its clearer/easier to test an internal part of a flow rather than setting up for testing the public method then that's a better idea. 		5–10	2–5	Heat networks	Test-driven development, Agile methodology, e.g. Scrum
32	11/10/2023 03:46:23	Python	Yes	prefix method name with single underscore 	Yes	Disagree	Sometimes	Never	Often	Never	Never	Never	Never		No			Very Important	Very Important	Important	Important	Somewhat important	Very Important	No opinion	No opinion	Disagree			10–15	5–10	Information Technology	Test-driven development, Acceptance test-driven development, Test-last development, Agile methodology, e.g. Scrum
33	11/10/2023 16:25:33	Python	Yes	"_" prefix for protected fields/methods, "__" for private 	Yes	Disagree	Often	Mostly	Often	Sometimes	Never	Never	Never		No			Very Important	Important	Somewhat important	Very Important	Important	Very Important	Very Important	Very Important	Agree			5–10	5–10	Hospitality / Leisure Industry	Test-driven development, Behaviour-driven development, Acceptance test-driven development, Agile methodology, e.g. Scrum
34	14/10/2023 15:02:29	C#	My main programming language has access modifiers		Yes	Strongly agree	Never	Never	Not a feature in my language	Never	Never	Never	Never		No			Important	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Important	Strongly Agree			5–10	5–10	Healthcare	Test-driven development, Feature-driven development, Agile methodology, e.g. Scrum
35	15/10/2023 17:31:29	Python	Yes	Using underscore	Yes	Not sure	Sometimes	Mostly	Never	Rarely	Mostly	Never	Never	Nope, I only use the simplest one, i.e. testing public method that invokes the non-public method.	No			Very Important	Very Important	Important	Important	Important	Important	Somewhat important	Somewhat important	Disagree			5–10	0–2	University / Education	Test-driven development, Behaviour-driven development
36	26/09/2023 14:03:09	Java	My main programming language has access modifiers		Yes	Not sure	Never	Mostly	Never	Rarely	Never	Never	Rarely	Elevate private to package private  instead 	Yes	I elevate private to package private, and leave the others as is. This is because I always test with a test class that matches the actual class, so it’s in the same package.	The above answer is more following the practice of keeping classes as focused and self contained as possible. 	Somewhat important	Very Important	Important	Very Important	Somewhat important	Important	Very Important	Important	Agree	I don’t follow OO principles as a dogma, so I see keeping methods as private as a means more to reduce cognitive load when using a class as an API than as a strict rule to follow. In short, I have no qualms with elevating from private to protected if absolutely necessary.   Another thing I’d like to add is that I personally use private methods as a way to improve readability and keep scope of functionality in check, avoiding very long methods. In this sense I don’t often need to test the private methods, I just test the visible methods more often. 	Not personally	2–5	2–5	Enterprise / Business Software	Feature-driven development, Agile methodology, e.g. Scrum
37	26/09/2023 16:24:33	Java	My main programming language has access modifiers		Yes	Disagree	Sometimes	Often	Sometimes	Rarely	Never	Never	Sometimes	Changing the visibility of the method to "no modifier" permanently	No			Very Important	No opinion	Somewhat important	No opinion	Important	No opinion	Very Important	Somewhat important	Strongly Disagree			10–15	More than 15	Information Technology	Feature-driven development, Agile methodology, e.g. Scrum
38	26/09/2023 17:26:09	Java	My main programming language has access modifiers		Yes	Strongly agree	Rarely	Mostly	Not a feature in my language	Sometimes	Rarely	Sometimes	Sometimes	no	Yes	protected methods in java can be tested directly in a unit test style so long as the tests are in the same package. Private methods can not be tested this way.	not really	Very Important	Somewhat important	Very Important	Very Important	Important	Very Important	Very Important	Very Important	Not sure	If you are stuck in a situation where you need to test a non-public method, it usually means your design is wrong. Avoiding this situation is usually down to correct and thoughtful design.		10–15	5–10	Information Technology, Enterprise / Business Software	Test-last development, Agile methodology, e.g. Scrum
39	26/09/2023 17:59:03	Java	My main programming language has access modifiers		Yes	Disagree	Often	Sometimes	Often	Never	Never	Never	Rarely	Mostly what I do (in Java) is have the method be "package private" (the default visibility) and use an annotation (@VisibleForTesting) to mark the reason for the visibility. Then I invoke the method directly from the unit tests.  In Go I simply put the _test.go file in the same package as the unit under test.	Yes	(a) I never directly invoke private methods. I either change their visibility or indirectly test them from a more visible method. (b) When testing non-public methods I usually have a specific goal in mind. Such as, I am not sure of the correctness of this tricky computation that is not fully visible in the public output. I will focus my testing on that specific tricky computation.	Don't test every non-public method. Save the testing for when there is a specific concern around correctness. Writing tests is a good way to reassure yourself or a reviewer that the method is correctly implemented.	Somewhat important	Important	Important	Important	Important	Important	Very Important	Somewhat important	Strongly Disagree	Response to previous question "Testing non-public methods leads to more tests failing spuriously when modifications are made to those methods."   Usually tests on non-public methods that are their to assert the correctness of a tricky computation or data-structure are there for a reason. Because they are usually isolated to "leaf methods/functions" these tests rarely fail unless a specific change is being made to the production implementation that changes the contract of the functions under test. When the contract changes new tests need to be written and the old tests removed.   Those types of changes are usually highly localized. Large scale changes to unrelated functionality very rarely cause these types of tests to fail. 	Mocking is an orthogonal issue to testing of non-public methods in my experience. Mocking is typically used to test network resources (RPC services, APIs, Databases, etc...) that are not appropriate to set up a "real" version of them for every test. Mocking is of course not the only way to deal with this problem. The other obvious solution is to use a Fake or another kind of Test Double. Typically Fakes are preferred when available but Mocking can allow easier tests for non-standard behavior such as exceptional flows that may be hard to simulate either in an integration test or with a Test Fake.	10–15	10–15	Information Technology, Enterprise / Business Software	Test-driven development
40	26/09/2023 19:01:31	Kotlin	My main programming language has access modifiers		No	Agree	Rarely	Often	Rarely	Rarely	Never	Never	Never		No			Very Important	Very Important	Important	Very Important	Important	Important	Very Important	Very Important	Agree			More than 15	More than 15	Information Technology	Test-driven development, Behaviour-driven development
41	26/09/2023 21:09:35	Typescript	My main programming language has access modifiers		Not sure	Agree	Rarely	Mostly	Rarely	Sometimes	Rarely	Never	Rarely		No			Very Important	Important	Important	Important	Important	Important	Very Important	Important	Strongly Agree			5–10	2–5	Enterprise / Business Software	Feature-driven development, Agile methodology, e.g. Scrum
42	26/09/2023 21:20:02	Java	My main programming language has access modifiers		Yes	Strongly agree	Rarely	Mostly	Never	Never	Never	Never	Rarely	Our company tends to test our behaviours at a fairly integrated level. For instance, when we test the web crawler part of the application, we spin up a fake server with stubbed page responses, crawl the application and assert about what the crawler finds. We tend to use fairly high-level and feature-rich custom DSLs (domain-specific languages) to define our expected behaviours. This means we get a high amount of coverage from our tests and ensures that new features must be wired in to production in order to be tested. We tend to avoid using mocks as tests using mocks tend to be more brittle and rely too heavily on the test knowing how the implementation works.	No			Somewhat important	Very Important	Important	Very Important	Very Important	Very Important	Very Important	Not important	Agree			5–10	5–10	Cybersecurity	Test-driven development, Agile methodology, e.g. Scrum
43	27/09/2023 05:58:12	Java	My main programming language has access modifiers		Yes	Strongly agree	Never	Mostly	Never	Rarely	Never	Never	Never	Refactoring a collection private methods into a collaborating object with a well defined API.	No		I try to always follow the front door principle - test the code through the API it was defined with. If you are having trouble testing private code that may be a sign that there is a design/decomposition problem. My first instinct is to think about how the design of the code could be altered to make the testing less complicated.	Somewhat important	Important	Very Important	Very Important	Important	Very Important	Very Important	Very Important	Agree		Id prefer to see mocking tools go away :)	More than 15	More than 15	Information Technology	Test-driven development, Behaviour-driven development, Agile methodology, e.g. Scrum
44	27/09/2023 14:58:32	Java	My main programming language has access modifiers		Yes	Agree	Never	Mostly	Never	Never	Never	Never	Never		No			Important	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Important	Disagree			10–15	10–15	Fintech (Finance), Healthcare	Test-driven development, Behaviour-driven development, Agile methodology, e.g. Scrum, Detroit (Classicist) TDD
45	27/09/2023 15:23:08	Java	My main programming language has access modifiers		Yes	Strongly agree	Never	Mostly	Sometimes	Never	Never	Never	Never		No		Personally, I avoid testing non-public methods where I can. The only time I will test a protected method is if my code is part of a library and I expect consumers to extend my library.	Important	Very Important	Somewhat important	Very Important	Very Important	Very Important	Very Important	Important	Strongly Agree	Personally, I avoid testing non-public methods where I can. I feel as though unit tests should test the code from a behaviour perspective, and should exercise the code as a consumer of the code would. 		5–10	5–10	Enterprise / Business Software, Retail Industry	Test-driven development, Behaviour-driven development
46	27/09/2023 15:29:37	Java	My main programming language has access modifiers		Yes	Disagree	Sometimes	Rarely	Sometimes	Sometimes	Never	Rarely	Rarely	Java has "protected" and "default" modifiers which provide some extra options. Can also mark the intended non-public methods as implementing a separate interface (interface segregation), which can be used to control which code calls them. Refactoring to keep methods close to SRP also helps keep interfaces and method modifiers clearer.	Yes	non-public methods are often tested more strictly for edge case handling, since they often embody the core logic of a class including error/edge case events. For public methods testing can focus more on confirming the contract/interface is implemented correctly. Basically test the right thing at the right level of detail.	Should this method be here? Should it have a different modifier? Is it doing one thing? How can I break it? How can it be hardened against that breakage?	Somewhat important	Very Important	Somewhat important	Important	Very Important	Very Important	Important	Somewhat important	Agree	Long-lived unit testing of non-public methods can lead to more rigid and leas easily refactored code, especially for code which is in greater need of refactoring. However there is also scope for treating refactoring as needing to cover unit tests too. Also there is merit to having either short-lived unit tests during dev/refactoring work or creating tests that are explicitly "white box" tests that may not be part of pipeline test suites.	mocking/stubbing tools can always be misused. It would be good to see mock/stub tools (especially autogeneration tools) suggesting refactoring improvements which would reduce the need for mocks and stubs.	More than 15	More than 15	Information Technology, Enterprise / Business Software, Fintech (Finance), Retail Industry, Transportation / Automotive, consultancy - we work across all the above.	Test-driven development, Behaviour-driven development, Feature-driven development, Agile methodology, e.g. Scrum, Waterfall method, "Waterfall" is called "Safe" these days ;-) 
47	27/09/2023 15:32:18	Java	My main programming language has access modifiers		Yes	Strongly agree	Never	Mostly	Never	Never	Never	Never	Rarely	None should be required;  a properly considered private method is inherently an implementation detail of the public interface. Potentially the method may be re-evaluated and extracted to it's own component, in which case it would become a non-private method, subject to it's own unit tests.	Yes	You are separating access modifiers into public and non-public; I would look at it as non-private and private. Any method with accessibility outside of it's own class can be accessed by a unit test, and thus *could* be unit tested (note that not every single method needs to be explicitly tested in of itself if that functionality is considered integral to other methods under unit test)	The access modifier a dev choose to give to a method should be well considered; if the decision has been made to make the method private, it should be understood why there is a desire to restrict that functionality to a single class. If that class is written to a good standard and observes best practise regarding single responsibility, then all methods within that class should serve that single set of functionalities; thus all code in the class should be adaquately testable via the public methods that class exposes. Attempting to test every single implementation detail is not so different from duplicating functionality within your production code; it leads to redundant code that takes significantly longer to update if a refactor is required while providing little to no real value. 	Very Important	Very Important	Very Important	Very Important	Very Important	Somewhat important	Very Important	Somewhat important	Agree	If you're finding yourself testing private methods, you probably either don't understand what access modifiers are for, or you're dealing with a bloated class that does not observe SOLID princibles and should be refactored.	No; I'd rather see less of them so as not to promote what I absolutely believe to be bad practise.	5–10	5–10	Information Technology, Enterprise / Business Software	Test-driven development, Agile methodology, e.g. Scrum, I have suffered waterfall and test-last development, but do not willingly employ them. I would like to try BDD, but have yet to work with a team that employs it.
48	27/09/2023 15:55:29	Java	My main programming language has access modifiers		No	Strongly agree	Never	Mostly	Never	Rarely	Never	Never	Never	No, private methods should only ever be tested via the behaviour of the public interface 	No		Private methods should only ever be tested via the behaviour of the public interface 	Important	Very Important	Very Important	Very Important	Very Important	Somewhat important	Very Important	Somewhat important	Strongly Agree			10–15	10–15	Information Technology, Enterprise / Business Software, Public Sector / Government / Defense	Test-driven development, Behaviour-driven development, Agile methodology, e.g. Scrum
49	27/09/2023 16:33:49	Java	My main programming language has access modifiers		Yes	Strongly agree	Never	Mostly	Never	Never	Never	Never	Never	If the logic in private methods is sufficiently complex or potential re-usable I may extract this into a separate class and test that class separately via its public methods.	Yes	Protected methods are essentially public methods within that particular package therefore I would test them the same as public methods via that package's unit tests.	No	Important	Very Important	Important	Very Important	Very Important	Very Important	Very Important	Somewhat important	Strongly Agree	It's important that unit tests test the behaviour and not the implementation - testing private methods leans more towards the latter.  Sufficient complexity in private methods that lead to an inclination to test them separately suggests some refactoring may be in order to extract some of that complexity / different responsibilities.	No	More than 15	More than 15	Enterprise / Business Software, Transportation / Automotive	Test-driven development, Behaviour-driven development, Agile methodology, e.g. Scrum
50	27/09/2023 19:00:08	C++	No	Visibility is usually irrelevant for understanding the code that references members, and encoding it in the name increases the work required to change visibility.	Yes	Strongly agree	Rarely	Mostly	Rarely	Not a feature in my language	Never	Never	Never	Wrap the call in a public method suffixed with `ForTesting`	No			Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Important	Agree	In general, don't test non-public methods. Test the overall behavior in the public API, and if necessary, make the non-public method into a public one in a library for more thorough testing.		More than 15	More than 15	Information Technology, Enterprise / Business Software, Infrastructure	Behaviour-driven development, Test-last development, Feature-driven development
51	28/09/2023 10:45:19	Typescript	Both. JS/TS supports private fields now but has a history of not	Underscore prefixes	Yes	Strongly agree	Rarely	Mostly	Rarely	Rarely	Sometimes	Never	Never		No		Don't test them	Somewhat important	Very Important	Very Important	Important	Very Important	Very Important	Very Important	Not important	Strongly Agree			10–15	5–10	Information Technology	Feature-driven development
52	28/09/2023 11:20:58	C#	My main programming language has access modifiers		No	Agree	Never	Sometimes	Never	Never	Sometimes	Never	Never	If your private methods need testing independently, you may not have broken up your into small enough units to be tested independently. Consider breaking it up so that each unit is testable by design, then you don't end up in situations where you need to change accessibility modifiers purely for the sake of your tests.	No		As mentioned in my previous comment, consider whether your code its written into small enough units. You can't have too many small public methods. Look at single responsibility principle as a general guideline. 	Important	Very Important	Very Important	Very Important	Very Important	Important	Very Important	Very Important	Disagree			10–15	5–10	Information Technology	Test-driven development, Acceptance test-driven development, Feature-driven development, Agile methodology, e.g. Scrum, Waterfall method
53	28/09/2023 13:15:00	Typescript	My main programming language has access modifiers		No	Strongly agree	Rarely	Mostly	Sometimes	Rarely	Never	Never	Never		No		I write robust unit tests for non-public methods that are critical e.g. low level architectural middleware, code paths were failures are high cost, etc. 	Not important	Very Important	Important	Very Important	Very Important	Very Important	Very Important	Very Important	Strongly Agree	I strongly agree with the philosophy of integration testing as described in https://kentcdodds.com/blog/the-testing-trophy-and-testing-classifications.	No.	10–15	10–15	Enterprise / Business Software, I help build Customer Data Platform services and UI.	Feature-driven development, Agile methodology, e.g. Scrum, Testing is a mix of TDD, BDD, or sometimes writing tests at the end but asserting for expected behavior from the user's perspective. It depends on how complex the code is, and what feels intuitive/natural to start with.
54	28/09/2023 22:10:08	Java	My main programming language has access modifiers		Yes	Agree	Rarely	Mostly	Rarely	Never	Sometimes	Never	Never	sometime add break points to affectively go inside the private code, you then might inspect some local variables. Code coverage tool helps to know if hitting enough of the code be it public or private.	No		getting good coverage from a public method that invokes it to ensure the main paths are covered if not all. It does of course depend on time and the complexity of the method. If simplistic, there is a question of is it worth testing	Important	Important	Important	Important	Somewhat important	Very Important	Very Important	Very Important	Agree		generally to make it easier to mock objects or use a hybrid mock.	More than 15	5–10	Information Technology	Agile methodology, e.g. Scrum, Waterfall method
55	29/09/2023 00:45:44	Typescript	Yes	If there is a need to really distinguish variables and functions from being exposed. In my personal programming projects, I adopt using an underscore prefix but in my day job, this is usually frowned upon	No	Disagree	Never	Often	Never	Sometimes	Never	Never	Never	No, not that I know of	No		If the logic within the non-public is complex and critical, then do what you need to do to test them. But if the logic is basic and not critical, then refrain from writing tests to test them directly, test the public functions that use them instead.	Somewhat important	Very Important	Very Important	Very Important	No opinion	Important	Very Important	Important	Not sure			More than 15	0–2	Information Technology	Feature-driven development
56	29/09/2023 10:19:58	Java	My main programming language has access modifiers		Yes	Disagree	Sometimes	Mostly	Sometimes	Rarely	Never	Never	Rarely	Create extensions of the classes under test in the test package which expose the non-public members	Yes	In Java at least, protected methods can be called from classes in the same package (production and test sources can have the equivalent packages). Private methods cannot, so the class must be extended to put a public wrapper around the private method.		Somewhat important	Very Important	Somewhat important	Very Important	Important	Very Important	Very Important	Very Important	Not sure			2–5	0–2	Enterprise / Business Software	Test-driven development, Feature-driven development, Agile methodology, e.g. Scrum
57	29/09/2023 10:29:38	Java	My main programming language has access modifiers		Yes	Agree	Rarely	Sometimes	Not a feature in my language	Rarely	Never	Never	Sometimes	Use the @VisibleForTesting tag for methods made public for unit test purposes	No		Only make non public methods public for testing if essential	Important	Important	Very Important	Very Important	Very Important	Somewhat important	Important	Important	Disagree	Testing is always focused on public methods. Access to non-public method is only even used when it is  required to allow internal state to be inspected or modified for test	The equivielent to the@VisibleForTesting tag for c++ unit testing would be nice	More than 15	5–10	Public Sector / Government / Defense	Test-driven development, Acceptance test-driven development, Feature-driven development, Agile methodology, e.g. Scrum
58	29/09/2023 18:19:10	Java	My main programming language has access modifiers		Yes	Strongly agree	Rarely	Mostly	Rarely	Rarely	Never	Never	Rarely	Refactoring the code to expose the functionality behind the private methods via a new public interface	Yes	Personal preference - calling protected methods from within the test package is acceptable as it doesn't imply the public API is defective/leaks internals.	Prefer to refactor the public interface of the code over testing internals - needing to use private methods is a sign of a leaky abstraction. Trying to test internal methods leads to brittle tests as it ties the checking of behaviour to the underlying implementation. Ideally tests should not change result from a (correct) refactoring of internal components.	Somewhat important	Important	Important	Very Important	Important	Very Important	Very Important	Somewhat important	Strongly Agree	Although I believe tests should only exercise the public API of code, I think it's ok to look at the implementation while designing test cases for it. Generally I believe you get better results if the code under test is in-scope for changes too vs just writing tests against a fixed API. In some cases (i.e. ours) over-reliance on mocks to address missing dependency injection frameworks also leads to the same problem of over-specific tests (though not because they directly call private APIs, but usually to set private fields by a factory argument to a constructor for example).	Not sure	5–10	5–10	Information Technology, 	Test-driven development, Test-last development
59	29/09/2023 18:37:11	Typescript	My main programming language has access modifiers		Yes	Strongly agree	Rarely	Rarely	Often	Never	Sometimes	Often	Rarely		No			Very Important	Very Important	Important	Very Important	Important	Very Important	Very Important	Very Important	Not sure			More than 15	More than 15	Information Technology	Behaviour-driven development, Agile methodology, e.g. Scrum
60	01/10/2023 20:17:43	Java	My main programming language has access modifiers		Yes	Strongly agree	Never	Mostly	Never	Rarely	Sometimes	Never	Never		No			Very Important	Very Important	Important	Important	Very Important	Important	Very Important	Very Important	Strongly Agree			More than 15	More than 15	Public Sector / Government / Defense	Behaviour-driven development, Test-last development, Feature-driven development, Agile methodology, e.g. Scrum
61	02/10/2023 08:13:53	C++	My main programming language has access modifiers		Yes	Strongly disagree	Always	Often	Sometimes	Sometimes	Sometimes	Never	Never		No			Very Important	Very Important	Important	Very Important	Very Important	Somewhat important	Very Important	Important	Strongly Disagree			More than 15	More than 15	Transportation / Automotive	Behaviour-driven development, Acceptance test-driven development, Agile methodology, e.g. Scrum
62	03/10/2023 09:23:25	Java	My main programming language has access modifiers		No	Agree	Never	Never	Never	Rarely	Never	Never	Never		No			Somewhat important	Very Important	Very Important	No opinion	No opinion	Very Important	Very Important	Somewhat important	Disagree	Testing should be proving responses from exposed interfaces, i.e. public methods.  Private methods are internal to a module's implementation and should not need testing.  If a method is deemed to contain an algorithm important enough to need testing, I would expect it to be made public permanently.		More than 15	More than 15	Public Sector / Government / Defense	Behaviour-driven development, Agile methodology, e.g. Scrum
63	03/10/2023 11:59:56	Typescript	My main programming language has access modifiers	N/A	Yes	Strongly agree	Rarely	Mostly	Never	Rarely	Never	Never	Never	N/A	No		Non-public methods should be treated as internal implementations that are free to change as long as the public API doesn't break. Testing non-public methods directly often leads to lots of mocks that fail unhelpfully. https://www.thoughtworks.com/en-gb/insights/blog/mockists-are-dead-long-live-classicists is useful is a good summary	Important	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Strongly Agree	See the article attached to "Are there any guidelines, best practices, or specific rules you follow when testing non-public methods?" if not already read	No	5–10	2–5	University / Education, Enterprise / Business Software	Test-driven development, Agile methodology, e.g. Scrum
64	12/10/2023 12:07:15	Python	Yes	protected / private: single / double underscore prefix	Yes	Disagree	Sometimes	Often	Mostly	Sometimes	Rarely	Never	Rarely		No			Important	Very Important	Somewhat important	Important	Somewhat important	Very Important	No opinion	Somewhat important	Agree			0–2	0–2	Information Technology	Agile methodology, e.g. Scrum
65	28/09/2023 10:08:51	C#	My main programming language has access modifiers		Yes	Strongly agree	Never	Mostly	Never	Never	Never	Never	Never	No	No		Using non-public methods is a way to bundle functionality together so that a class can invoke them repeatedly and make public functions cleaner and more readable. IE taking functionality and using a private method to bundle it and describe what that particular step in a public function is doing.  Because of this, my stance on testing non-public methods is that you should never do it. Your tests should test behaviour of a class and not the implementation. Writing tests that are coupled to the private implementation of a class hurts the ability to refactor in the future.  Furthermore, if a private method can't be tested through the public methods on a class, that probably means your class never invokes that private method, thus making it dud code which should be removed.	Somewhat important	Very Important	Very Important	Very Important	Very Important	Very Important	Very Important	Important	Strongly Agree		No, as I think testing non-public methods is a bad practise and shouldn't be encouraged	2–5	2–5	Mass Media / Entertainment	Test-driven development, Behaviour-driven development, Agile methodology, e.g. Scrum
66	28/09/2023 10:32:39	Python	Yes	The standard: one underscore for private. I never use name mangling (double underscore).	Yes	Strongly agree	Never	Mostly	Never	Sometimes	Never	Never	Sometimes		No			Important	Very Important	Very Important	Important	Important	Very Important	Very Important	Somewhat important	Strongly Agree			2–5	2–5	Mass Media / Entertainment	Test-driven development, Behaviour-driven development, Agile methodology, e.g. Scrum, Waterfall method
67	28/09/2023 10:43:02	Python	Yes	underscore prefix	No	Disagree	Often	Often	Mostly	Never	Often	Never	Never	Fuzzing and property based testing	No			Somewhat important	Very Important	Not important	No opinion	No opinion	No opinion	No opinion	No opinion	Agree			5–10	2–5	Information Technology	
68	28/09/2023 10:45:31	Python	Yes	Python underscores	No	Strongly agree	Never	Mostly	Never	Never	Never	Never	Sometimes	Potentially not writing non-public methods at all - hiding implementation details is considered an anti-pattern	No		Don't :)	Important	Very Important	Somewhat important	Very Important	Very Important	Very Important	Very Important	Important	Strongly Agree		Nope	More than 15	10–15	Information Technology, Enterprise / Business Software, Mass Media / Entertainment	Test-driven development
69	28/09/2023 13:54:11	PHP	My main programming language has access modifiers	My main programming language has access modifiers	No	Agree	Never	Mostly	Never	Sometimes	Never	Never	Never	No	No		I aim to test functionality holistically rather than individual methods, mainly by use of Feature tests, and use Unit tests to provide further sturdier tests for complex and smaller sections of the codebase	Somewhat important	Very Important	Important	Very Important	Important	Important	Very Important	Somewhat important	Agree	Non-public methods, to be used, must be used inside the class. Therefore it should be possible in all cases to test the public method calling the non-public method, and if it is not perhaps it is a sign that your code needs refactoring to be more secular and not that you should update the visibility to be incorrect	No	0–2	0–2	Information Technology	Feature-driven development
70	28/09/2023 18:53:19	Python	Yes	PEP8	Yes	Agree	Often	Not a feature in my language	Mostly	Sometimes	Sometimes	Not a feature in my language	Not a feature in my language		No		Testing public methods assures me that I've not broken things for other developers (i.e. consumers). Testing private methods assures me I've not broken anything for myself, so it's a helper when refactoring or adding new functionality that internal behaviour has remained the same if intended, otherwise the test is reworked/removed. 	Very Important	Very Important	Not important	Very Important	Important	Very Important	Very Important	Somewhat important	Disagree			10–15	10–15	Information Technology, Enterprise / Business Software	Acceptance test-driven development, Test-last development, Agile methodology, e.g. Scrum
71	29/09/2023 09:21:40	PHP	My main programming language has access modifiers		No	Strongly agree	Never	Mostly	Never	Never	Rarely	Never	Never	Write higher level tests that test more of the codebase	No		Don't do it, non-public methods are internal implementation and shouldn't be tested as not part of the contract for the rest of the SUT	Very Important	Important	Not important	Important	Very Important	Somewhat important	Important	Not important	Strongly Agree		No	More than 15	10–15	Information Technology	Test-driven development, Test-last development, Feature-driven development, Agile methodology, e.g. Scrum, Waterfall method
72	29/09/2023 10:45:40	Python	Yes	Single underscore for functions not to be used outside the class they are defined in	Yes	Agree	Rarely	Mostly	Rarely	Rarely	Never	Never	Never		No			Very Important	Very Important	Important	Very Important	Very Important	Very Important	Very Important	Very Important	Agree	This is something that I've been thinking about more recently and trying to find the best approach to. My feelings currently are that when testing a class, if I feel the need to test a non-public method, it suggests that the class/public method is too big and needs to be split out in some way. I primarily use non-public methods to split a class's functionality into sections to make it more readable. I think that testing public rather than non-public methods leans more towards testing behaviour rather than implementation which is usually preferable.	I don't think so	5–10	2–5	Information Technology, Enterprise / Business Software, Mass Media / Entertainment	Test-driven development, Test-last development, Agile methodology, e.g. Scrum
73	04/10/2023 20:52:56	Kotlin	My main programming language has access modifiers		Yes	Agree	Never	Often	Never	Never	Never	Never	Sometimes		No			Very Important	Very Important	Important	Important	Important	Somewhat important	Important	Somewhat important	Agree			More than 15	10–15	Fintech (Finance)	Test-driven development, Feature-driven development, Agile methodology, e.g. Scrum